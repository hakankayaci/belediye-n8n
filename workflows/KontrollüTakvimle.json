{
  "name": "KontrollüTakvimle",
  "nodes": [
    {
      "parameters": {
        "operation": "getAll",
        "calendar": {
          "__rl": true,
          "value": "bahcesehirpadel@gmail.com",
          "mode": "list",
          "cachedResultName": "bahcesehirpadel@gmail.com"
        },
        "timeMin": "={{ $json.startISO }}",
        "timeMax": "={{ $json.endISO }}",
        "options": {
          "fields": "items(summary,start,end)"
        }
      },
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        -592,
        -32
      ],
      "id": "f619e386-a61a-45cc-a599-f4bb35ed317f",
      "name": "RandevulariGetir",
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id": "YsadIYowWTH5Du7C",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"available\": true,\n  \"message\": \"Saat uygun, randevu oluşturulabilir.\",\n  \"startISO\": \"{{$json.startISO}}\",\n  \"endISO\": \"{{$json.endISO}}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        -64
      ],
      "id": "eceee1b5-1259-40a6-9da3-79fbccee22cf",
      "name": "YES"
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "{\n  \"available\": false,\n  \"message\": \"Bu saat aralığında çakışma var.\",\n  \"conflicts\": \"{{ $json.conflicts }}\",\n  \"startISO\": \"{{$json.startISO}}\",\n  \"endISO\": \"{{$json.endISO}}\"\n}\n",
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        112,
        144
      ],
      "id": "0ee0ec65-9555-48d3-aa37-89c6deac2fb4",
      "name": "NO"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "startISO"
            },
            {
              "name": "endISO"
            },
            {
              "name": "durationMin",
              "type": "number"
            },
            {
              "name": "calendarId"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1120,
        80
      ],
      "id": "bc9fd3f6-943b-4bcd-984f-0fcb85ba88ff",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "/**\n * Normalize + RandevularıGetir girişlerini tek yürütmede işler.\n * Çıktı: { available, conflicts[], startISO, endISO, calendarId }\n */\ntry {\n  const all = $input.all(); // Merge ile iki dal bir arada gelir\n\n  if (!all || all.length === 0) {\n    // Manuel testte boşsa bile bir cevap dön\n    return [{ json: { available: true, conflicts: [], note: 'No input items' } }];\n  }\n\n  // 1) Normalize item'ını yakala\n  const norm = all.find(i => i?.json && i.json.startISO && i.json.endISO);\n  if (!norm) {\n    return [{ json: { available: false, conflicts: [], error: 'Normalize verisi yok (startISO/endISO bulunamadı)' } }];\n  }\n  const { startISO, endISO, calendarId } = norm.json;\n  const reqStart = new Date(startISO);\n  const reqEnd   = new Date(endISO);\n\n  // 2) Event'leri topla (Get Many -> items/response/list vb.)\n  const events = [];\n  for (const it of all) {\n    const j = it?.json || {};\n    if (j.start && j.end && !(j.startISO || j.endISO)) events.push(j);\n    if (Array.isArray(j.items))     for (const ev of j.items)     if (ev?.start && ev?.end) events.push(ev);\n    if (Array.isArray(j.response))  for (const ev of j.response)  if (ev?.start && ev?.end) events.push(ev);\n    if (Array.isArray(j.list))      for (const ev of j.list)      if (ev?.start && ev?.end) events.push(ev);\n  }\n\n  // 3) Yardımcılar\n  const pad = n => String(n).padStart(2, '0');\n  const fmt = d => `${pad(d.getHours())}:${pad(d.getMinutes())}`;\n  const parse = v => {\n    if (!v) return null;\n    if (typeof v === 'string') return new Date(v);\n    if (v.dateTime) return new Date(v.dateTime);\n    if (v.date)     return new Date(`${v.date}T00:00:00+03:00`);\n    return null;\n  };\n\n  // 4) Çakışma hesabı\n  const conflicts = [];\n  for (const ev of events) {\n    const s = parse(ev.start);\n    const e = parse(ev.end);\n    if (!s || !e || isNaN(s) || isNaN(e)) continue;\n    if (reqStart < e && reqEnd > s) conflicts.push(`${fmt(s)}–${fmt(e)}`);\n  }\n\n  // 5) Her durumda tek bir item döndür\n  return [{\n    json: {\n      available: conflicts.length === 0,\n      conflicts,\n      startISO,\n      endISO,\n      calendarId\n    }\n  }];\n\n} catch (err) {\n  return [{\n    json: {\n      available: false,\n      conflicts: [],\n      error: String(err?.message || err)\n    }\n  }];\n}\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        32
      ],
      "id": "bc0b56c0-c079-487f-9260-efbd75b663f6",
      "name": "BuildConflicts"
    },
    {
      "parameters": {
        "jsCode": "const DEFAULT_CAL = 'bahcesehirpadel@gmail.com';\n\nconst startISO = $json.startISO;\nconst endISO   = $json.endISO;\nconst calendarId = $json.calendarId || DEFAULT_CAL;\n\nif (!startISO || !endISO) {\n  throw new Error('startISO ve endISO gereklidir');\n}\n\nconst s = new Date(startISO);\nconst e = new Date(endISO);\nif (Number.isNaN(s.getTime()) || Number.isNaN(e.getTime())) {\n  throw new Error('Geçersiz ISO tarih');\n}\n\nreturn { json: { startISO, endISO, calendarId } };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        80
      ],
      "id": "8a76810b-03d7-404c-b3a8-09477f85d4e2",
      "name": "Normalize"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "c2b5a4a3-80c7-4366-9264-37ced8e4c2cc",
              "leftValue": "={{ $json.available }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -112,
        32
      ],
      "id": "91d0e817-6067-4e54-a3c6-8f1ce918a99d",
      "name": "tool.available"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -544,
        208
      ],
      "id": "4bb1049e-ebd0-4643-ba0c-908876c268df",
      "name": "Merge"
    }
  ],
  "pinData": {},
  "connections": {
    "RandevulariGetir": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "YES": {
      "main": [
        []
      ]
    },
    "NO": {
      "main": [
        []
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Normalize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BuildConflicts": {
      "main": [
        [
          {
            "node": "tool.available",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize": {
      "main": [
        [
          {
            "node": "RandevulariGetir",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "tool.available": {
      "main": [
        [
          {
            "node": "YES",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "NO",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "BuildConflicts",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "773508a4-b1eb-46ca-907e-4d1d27df3980",
  "meta": {
    "instanceId": "ded4573f5a30d75a139faba56963734c6f09495b27a6f622f6059cd28d6fd064"
  },
  "id": "KIbJAOeHp89hFuie",
  "tags": []
}